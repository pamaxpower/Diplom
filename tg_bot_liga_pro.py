
import re
import os
import telebot
from telebot import types
import pandas as pd
from datetime import datetime, timedelta
from dotenv import load_dotenv

from processing import search_player, processing_players, check_date

from parser_tournaments import start_parser_tournament

from parser_games import my_func



pd.options.display.max_colwidth = 100

URL = 'https://www.sport-liga.pro/ru/table-tennis/tournaments'


# –∫–Ω–æ–ø–∫–∏ 1 —ç—Ç–∞–ø–∞
def stage_1(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("–¢—É—Ä–Ω–∏—Ä—ã —Å–µ–≥–æ–¥–Ω—è", "–¢—É—Ä–Ω–∏—Ä—ã –∑–∞–≤—Ç—Ä–∞")
    markup.row("–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É")
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç! üëã  –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤?",
                     reply_markup=markup)


# –∫–Ω–æ–ø–∫–∏ 2 —ç—Ç–∞–ø–∞
def stage_2(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ü–æ–∏—Å–∫ –ø–æ –∏–≥—Ä–æ–∫—É', '–ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º', '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                     reply_markup=markup)



# —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –ø–æ –¥–∞—Ç–µ
def get_df(message, dat):
    global data
    filename = f'./tours/tours_in_{dat}.csv'
    try:
        data = pd.read_csv(filename)

    except Exception as ex:
        bot.send_message(message.chat.id,
                         "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞")
        start_parser_tournament(URL, dat)
        data = pd.read_csv(filename)
        bot.send_message(message.chat.id, "–¢—É—Ä–Ω–∏—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

    bot.send_message(message.chat.id, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ")
    data = processing_players(data)
    stage_2(message)


# —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
def check_date_input(message):
    dat = message.text
    global date
    try:
        dat = re.split(r'[,./]', message.text)
        if len(dat[2]) == 2:
            dat[2] = '20' + dat[2]
        if len(dat[1]) == 1:
            dat[1] = '0' + dat[1]
        if len(dat[0]) == 1:
            dat[0] = '0' + dat[0]
        selected_date = f'{dat[2]}-{dat[1]}-{dat[0]}'
        flag = check_date(selected_date)
        if flag:
            date = selected_date
        bot.send_message(message.chat.id, f"–î–∞—Ç–∞ '{date}' —É—Å–ø–µ—à–Ω–æ  —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        get_df(message, selected_date)

    except Exception:
        bot.send_message(message.chat.id,
                         '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. \
                            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì:')
        bot.register_next_step_handler(message, check_date_input)


# –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±–æ—Ç–∞
dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)
    TOKEN_BOT = os.getenv("TOKEN_BOT")

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN_BOT)


# –ù–ê–ß–ê–õ–û –†–ê–ë–û–¢–´ –ë–û–¢–ê. –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    stage_1(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ 1 —ç—Ç–∞–ø–∞
@bot.message_handler(
    func=lambda message: message.text in ["–¢—É—Ä–Ω–∏—Ä—ã —Å–µ–≥–æ–¥–Ω—è", "–¢—É—Ä–Ω–∏—Ä—ã –∑–∞–≤—Ç—Ä–∞",
                                          "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É"])
def tournaments_today(message):
    global date

    if message.text == "–¢—É—Ä–Ω–∏—Ä—ã —Å–µ–≥–æ–¥–Ω—è":
        today = datetime.now().strftime('%Y-%m-%d')
        date = today
        bot.send_message(message.chat.id, f"–î–∞—Ç–∞ '{date}' —É—Å–ø–µ—à–Ω–æ  —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
                         get_df(message, date))


    elif message.text == "–¢—É—Ä–Ω–∏—Ä—ã –∑–∞–≤—Ç—Ä–∞":
        tomorrow = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
        date = tomorrow
        bot.send_message(message.chat.id,
                         f"–î–∞—Ç–∞ '{tomorrow}' —É—Å–ø–µ—à–Ω–æ  —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", get_df(message, date))

    elif message.text == "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì:")
        bot.register_next_step_handler(message, check_date_input)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫ –ø–æ –∏–≥—Ä–æ–∫—É"
@bot.message_handler(func=lambda message: message.text == '–ü–æ–∏—Å–∫ –ø–æ –∏–≥—Ä–æ–∫—É')
def search_by_player(message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏–≥—Ä–æ–∫–∞:")
    bot.register_next_step_handler(message, process_player_search)


# —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ–∞–º–∏–ª–∏–∏
def process_player_search(message):
    global data
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    player_name = message.text

    tours = search_player(player_name, data)
    if not tours.empty:
        for i, row in tours.iterrows():
            url_tours = row['url']
            keyboard = [[types.InlineKeyboardButton(
                "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—É—Ä–Ω–∏—Ä–∞", url=url_tours)]]
            reply_markup = types.InlineKeyboardMarkup(keyboard)

            row.drop('url', inplace=True)
            bot.send_message(message.chat.id, row.to_string(),
                             reply_markup=reply_markup)
    else:
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–π –∏–≥—Ä–æ–∫ –≤ —ç—Ç—É –¥–∞—Ç—É –Ω–µ –∏–≥—Ä–∞–µ—Ç')

    stage_2(message)


# –∫–Ω–æ–ø–∫–∏ 3 —ç—Ç–∞–ø–∞
def stage_3(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    itembtn1 = types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å —Å—Ç–æ–ª')
    itembtn2 = types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è')
    itembtn3 = types.KeyboardButton('–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫')
    itembtn4 = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
    markup.add(itembtn1, itembtn2, itembtn3)
    markup.add(itembtn4)

    bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                     reply_markup=markup)


# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫
tables = ['A3', 'A4', 'A5', 'A6', 'A9', 'A15']
times = ["07:30", "07:45", "08:00", "09:30", "11:30", "11:45", "12:00",
         "14:00",
         "15:30", "15:45", "16:00", "16:45", "18:30", "19:30", "19:45",
         "20:00",
         "20:30", "21:00", "23:30", "23:45"]

# –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π
selected_tables = {}
selected_time = {}
value_tables = []
value_time = []


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"
@bot.message_handler(
    func=lambda message: message.text == '–ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º')
def search_parameters(message):
    stage_3(message)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ "–í—ã–±—Ä–∞—Ç—å —Å—Ç–æ–ª"
@bot.message_handler(func=lambda message: message.text == '–í—ã–±—Ä–∞—Ç—å —Å—Ç–æ–ª')
def select_table(message):
    markup = types.InlineKeyboardMarkup()
    buttons = []
    for table in tables:
        buttons.append(types.InlineKeyboardButton(table, callback_data=table))
    markup.add(*buttons[:3])
    markup.add(*buttons[3:])

    markup.add(types.InlineKeyboardButton("OK", callback_data="ok_tables"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–∏:", reply_markup=markup)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ "–í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è"
@bot.message_handler(func=lambda message: message.text == '–í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è')
def select_time(message):
    markup = types.InlineKeyboardMarkup(row_width=3)

    for i in range(0, len(times), 3):
        row = []
        for j in range(i, min(i + 3, len(times))):
            row.append(
                types.InlineKeyboardButton(times[j], callback_data=times[j]))
        markup.row(*row)

    markup.add(types.InlineKeyboardButton("OK", callback_data="ok_times"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–∏:", reply_markup=markup)




# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –≤—ã–±–æ—Ä–µ —Å—Ç–æ–ª–∞
@bot.callback_query_handler(func=lambda call: call.data in tables)
def table_callback(call):
    global selected_tables
    if call.data in selected_tables:
        selected_tables[call.data] = False
    else:
        selected_tables[call.data] = True

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    button_text = call.data
    if selected_tables[call.data]:
        button_text += " ‚úÖ"
    else:
        button_text = call.data

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.InlineKeyboardMarkup()
    buttons = []
    for el in tables:
        button = types.InlineKeyboardButton(el, callback_data=el)
        if el in selected_tables:
            button.text += " ‚úÖ"
        buttons.append(button)

    markup.add(*buttons[:3])
    markup.add(*buttons[3:])

    markup.add(types.InlineKeyboardButton("OK", callback_data="ok_tables"))

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–∏:",
        reply_markup=markup)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –û–ö –≤ –≤—ã–±–æ—Ä–µ —Å—Ç–æ–ª–∞
@bot.callback_query_handler(func=lambda call: call.data == "ok_tables")
def ok_table_callback(call):
    global selected_tables
    global value_tables

    selected_buttons = []
    for button, state in selected_tables.items():
        if state:
            selected_buttons.append(button)
    value_tables = list(selected_tables.keys())
    bot.send_message(call.message.chat.id,
                     f"–í—ã–±—Ä–∞–Ω—ã –∫–Ω–æ–ø–∫–∏: {', '.join(selected_buttons)}")
    selected_tables = {}

    stage_3(call.message)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏
@bot.callback_query_handler(func=lambda call: call.data in times)
def time_callback(call):
    global selected_time

    if call.data in selected_time:
        selected_time[call.data] = not selected_time[call.data]
    else:
        selected_time[call.data] = True

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    button_text = call.data
    if selected_time[call.data]:
        button_text += " ‚úÖ"
    else:
        button_text = call.data

    markup = types.InlineKeyboardMarkup()

    for i in range(0, len(times), 3):
        row = []
        for j in range(i, min(i + 3, len(times))):
            button = types.InlineKeyboardButton(times[j],
                                                callback_data=times[j])
            if times[j] in selected_time and selected_time[times[j]]:
                button.text += " ‚úÖ"
            row.append(button)
        markup.add(*row)

    markup.add(types.InlineKeyboardButton("OK", callback_data="ok_times"))

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–∏:",
        reply_markup=markup
    )


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –û–ö –≤ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏
@bot.callback_query_handler(func=lambda call: call.data == "ok_times")
def ok_time_callback(call):
    global selected_time
    global value_time

    selected_buttons = []
    for button, state in selected_time.items():
        if state:
            selected_buttons.append(button)
    value_time = list(selected_time.keys())
    bot.send_message(call.message.chat.id,
                     f"–í—ã–±—Ä–∞–Ω—ã –∫–Ω–æ–ø–∫–∏: {', '.join(selected_buttons)}")
    selected_time = {}

    stage_3(call.message)



# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"
@bot.message_handler(func=lambda message: message.text == '–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫')
def search_by_parameters(message):
    """ """
    global value_tables
    global value_time
    global data
    global ut
    ut = []
    bot.send_message(
        message.chat.id,
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {value_time} –∏ {value_tables}"
    )

    filename = f'./tours/tours_in_{date}.csv'
    data = pd.read_csv(filename)
    processing_players(data)
    df = data.loc[
        data['tables'].isin(value_tables) & data['time'].isin(value_time)]
    if not df.empty:
        num = 1
        for i, row in df.iterrows():
            url_tours = row['url']
            ut.append(url_tours)

            keyboard = [[types.InlineKeyboardButton(
                "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—É—Ä–Ω–∏—Ä–∞", url=url_tours)],
                        [types.InlineKeyboardButton(
                            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤",
                            callback_data=f"stats_players_{num}")]]

            reply_markup = types.InlineKeyboardMarkup(keyboard)

            row.drop('url', inplace=True)
            bot.send_message(message.chat.id, f'{row.to_string()}',
                             reply_markup=reply_markup)
            num += 1
    else:
        bot.send_message(message.chat.id,
                         '–° —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ç—É—Ä–Ω–∏—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    stage_2(message)


@bot.callback_query_handler(
    func=lambda call: call.data.startswith("stats_players_"))
def stat_players(call):
    global ut
    index = int(call.data.split('_')[2]) - 1
    bot.send_message(call.message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏')

    name = f'{ut[index].split("/")[-1]}'
    try:
        data1 = pd.read_csv(f'{name}.csv')

    except Exception:

        data1 = my_func(ut[index])
        print(ut, index)
        data1.to_csv(f'{name}.csv', index=False)

    bot.send_message(call.message.chat.id,
                     f'{data1.to_string(index=False, header=True, col_space=15)}')


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
@bot.message_handler(func=lambda message: message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
def go_back(message):
    stage_2(message)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É"
@bot.message_handler(func=lambda message: message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É')
def end_session(message):
    bot.send_message(message.chat.id, "–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    stage_1(message)


bot.polling(none_stop=True)



